{"remainingRequest":"D:\\_codes\\MyProjects\\vuetestbs\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\_codes\\MyProjects\\vuetestbs\\src\\views\\About.vue?vue&type=style&index=0&id=039c5b43&scoped=true&lang=css&","dependencies":[{"path":"D:\\_codes\\MyProjects\\vuetestbs\\src\\views\\About.vue","mtime":1611646677585},{"path":"D:\\_codes\\MyProjects\\vuetestbs\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\_codes\\MyProjects\\vuetestbs\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\_codes\\MyProjects\\vuetestbs\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\_codes\\MyProjects\\vuetestbs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\_codes\\MyProjects\\vuetestbs\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoudmlzLWNvbnRhaW5lciB7CiAgd2lkdGg6IDk2MHB4OwogIGhlaWdodDogNTQwcHg7Cn0KCg=="},{"version":3,"sources":["About.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwYA;AACA;AACA;AACA","file":"About.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <b-navbar toggleable=\"lg\" type=\"dark\" variant=\"info\">\n      <b-navbar-brand href=\"#\">FabricDraw</b-navbar-brand>\n\n      <b-navbar-toggle target=\"nav-collapse\"></b-navbar-toggle>\n\n      <b-collapse id=\"nav-collapse\" is-nav>\n        <b-navbar-nav>\n          <b-button v-b-toggle.sidebar-variant size=\"sm\" class=\"my-2 my-sm-0\">Global Ope</b-button>\n        </b-navbar-nav>\n        <b-navbar-nav>\n          <b-button size=\"sm\" class=\"my-2 my-sm-0 mx-sm-2\" v-on:click=\"download()\">Download File</b-button>\n        </b-navbar-nav>\n        <b-navbar-nav>\n          <b-button size=\"sm\" class=\"my-2 my-sm-0 mx-sm-2\" v-on:click=\"exportNet()\">Export</b-button>\n        </b-navbar-nav>\n        <b-navbar-nav>\n          <b-form-file\n              v-model=\"netFile\"\n              :state=\"Boolean(netFile)\"\n              placeholder=\"Choose a file or drop it here...\"\n              drop-placeholder=\"Drop file here...\"\n              size=\"sm\"\n          ></b-form-file>\n        </b-navbar-nav>\n        <b-navbar-nav>\n          <b-button size=\"sm\" class=\"my-2 my-sm-0 mx-sm-2\" v-on:click=\"importNet()\">Import</b-button>\n        </b-navbar-nav>\n        <b-navbar-nav class=\"ml-auto\">\n          <b-nav-form>\n            <b-form-input size=\"sm\" class=\"mr-sm-2\" placeholder=\"Enter node label\" autocomplete=\"off\" v-model=\"searchNodeName\"></b-form-input>\n            <b-button size=\"sm\" class=\"my-2 my-sm-0\" v-on:click=\"searchNode()\" type=\"submit\">Search</b-button>\n          </b-nav-form>\n        </b-navbar-nav>\n      </b-collapse>\n    </b-navbar>\n    <b-sidebar id=\"sidebar-variant\" title=\"Global Ope\" bg-variant=\"light\" shadow>\n      <div class=\"px-3 py-2\">\n        <div class=\"my-2\">\n          <div v-b-toggle.collapse-1>\n            <b-icon icon=\"plus-circle-fill\" aria-hidden=\"true\"></b-icon>\n            Add Org\n          </div>\n          <b-collapse id=\"collapse-1\" variant=\"light\" class=\"mt-2\">\n            <b-card>\n              <b-row class=\"my-1\">\n                <b-form-input v-model=\"org.domain\" size=\"sm\" class=\"mr-sm-2\" placeholder=\"Enter base domain name\"></b-form-input>\n              </b-row>\n              <b-row class=\"my-1\">\n                <b-form-input v-model=\"org.name\" size=\"sm\" class=\"mr-sm-2\" placeholder=\"Enter org name\"></b-form-input>\n              </b-row>\n              <b-row class=\"my-1\">\n                <b-form-input v-model=\"org.firstPeerName\" size=\"sm\" class=\"mr-sm-2\" placeholder=\"Enter first peer name\"></b-form-input>\n              </b-row>\n              <b-row class=\"my-1\">\n                <b-button size=\"sm\" class=\"my-2 my-sm-0\" v-on:click=\"newOrg()\">Add</b-button>\n              </b-row>\n            </b-card>\n          </b-collapse>\n        </div>\n\n        <div class=\"my-2\">\n          <div v-b-toggle.collapse-2>\n            <b-icon icon=\"plus-circle-fill\" aria-hidden=\"true\"></b-icon>\n            Add Orderer\n          </div>\n          <b-collapse id=\"collapse-2\" variant=\"light\" class=\"mt-2\">\n            <b-card>\n              <b-row class=\"my-1\">\n                <b-form-input v-model=\"orderer.name\" size=\"sm\" class=\"mr-sm-2\" placeholder=\"Enter orderer name\"></b-form-input>\n              </b-row>\n              <b-row class=\"my-1\">\n                <b-button size=\"sm\" class=\"my-2 my-sm-0\" v-on:click=\"newOrderer()\">Add</b-button>\n              </b-row>\n            </b-card>\n          </b-collapse>\n        </div>\n      </div>\n    </b-sidebar>\n    <div id=\"visualization\" class=\"vis-container m-auto\"></div>\n    <b-collapse id=\"collapse-3\" v-model=\"visible\" class=\"my-2\">\n      <b-card>\n        <b-row class=\"my-1\">\n          <b-col md=\"1\" offset-md=\"1\">\n            Change Domain:\n          </b-col>\n          <b-col md=\"3\">\n            <b-form-input size=\"sm\" v-model=\"peer.domain\"></b-form-input>\n          </b-col>\n          <b-col md=\"1\">\n            <b-button size=\"sm\" class=\"my-2 my-sm-0\" v-on:click=\"changeDomain()\">Chnage</b-button>\n          </b-col>\n        </b-row>\n        <b-row class=\"my-1\" v-if=\"showAddPeer\">\n          <b-col md=\"1\" offset-md=\"1\">\n            New Peer:\n          </b-col>\n          <b-col md=\"3\">\n            <b-form-input size=\"sm\" v-model=\"peer.name\" placeholder=\"Enter peer name\"></b-form-input>\n          </b-col>\n          <b-col md=\"1\">\n            <b-button size=\"sm\" class=\"my-2 my-sm-0\" v-on:click=\"newPeer()\">Add</b-button>\n          </b-col>\n        </b-row>\n      </b-card>\n    </b-collapse>\n  </div>\n</template>\n\n<script>\n\nexport default {\n  name: 'Vis',\n  data () {\n    return {\n      peerIndex: 4,\n      orgIndex: 2,\n      org: {\n        domain: \"test.com\",\n        name: \"\",\n        firstPeerName: \"\",\n        caName: \"ca\",\n      },\n      peer: {\n        domain: \"\",\n        name: \"\",\n        parentPeer: \"\",\n        orgIndex: \"\",\n      },\n      orderer: {\n        name: \"\",\n      },\n      orgs: {\n        0: {\n          domain: \"test.com\",\n          name: \"orderer\",\n          CAID: 0,\n          CAName: \"ca\",\n          peerName: {\n            1: \"orderer\",\n          },\n        },\n        1: {\n          domain: \"test.com\",\n          name: \"org1\",\n          CAID: 2,\n          CAName: \"ca\",\n          peerName: {\n            3: \"peer0\",\n          }\n        }\n      },\n      nodes: {},\n      edges: {},\n      visible: false,\n      showAddPeer: true,\n      searchNodeName: \"\",\n      netFile: null,\n    }\n  },\n  methods: {\n    newOrg() {\n      this.orgs[this.orgIndex] = {\n        domain: this.org.domain,\n        name: this.org.name,\n        CAID: this.peerIndex,\n        CAName: this.org.caName,\n        peerName: {}\n      }\n      this.nodes.add({\n        id: this.peerIndex,\n        label: this.org.caName + '.' + this.org.name + '.' + this.org.domain,\n        group: this.orgIndex,\n      })\n      this.peerIndex++\n      this.addPeer(this.orgIndex, this.org.firstPeerName, [this.peerIndex - 1, 1])\n      this.orgIndex++\n      this.org.name = \"\"\n      this.org.firstPeerName = \"\"\n    },\n    addPeer(org, name, parentPeers) {\n      this.orgs[org][\"peerName\"][this.peerIndex] = name\n      let peerLabel = \"\"\n      if (org != 0) {\n        peerLabel = name + '.' + this.orgs[org][\"name\"] + '.' + this.orgs[org][\"domain\"]\n      } else {\n        peerLabel = name + '.' + this.orgs[org][\"domain\"]\n      }\n\n      this.nodes.add({\n        id: this.peerIndex,\n        label: peerLabel,\n        group: org\n      })\n      for (let index = 0; index < parentPeers.length; index++) {\n        this.edges.add({from: this.peerIndex, to: parentPeers[index]})\n      }\n      this.peerIndex++\n    },\n    newPeer() {\n      this.addPeer(this.peer.orgIndex, this.peer.name, [this.peer.parentPeer])\n      this.peer['name'] = \"\"\n    },\n    newOrderer() {\n      this.addPeer(0, this.orderer.name, Object.keys(this.orgs[0][\"peerName\"]))\n      this.orderer['name'] = \"\"\n    },\n    changeDomain() {\n      this.orgs[this.peer.orgIndex][\"domain\"] = this.peer.domain\n      let peerID = Object.keys(this.orgs[this.peer.orgIndex][\"peerName\"])\n      if (this.peer.orgIndex == 0) {\n        this.nodes.updateOnly({\n          id: this.orgs[this.peer.orgIndex][\"CAID\"],\n          label: this.orgs[this.peer.orgIndex][\"CAName\"] + \".\" + this.peer.domain,\n        })\n        for (let index = 0; index < peerID.length; index++) {\n          this.nodes.updateOnly({\n            id: parseInt(peerID[index]),\n            label: this.orgs[this.peer.orgIndex][\"peerName\"][peerID[index]] + \".\" + this.peer.domain,\n          })\n        }\n      } else {\n        this.nodes.updateOnly({\n          id: this.orgs[this.peer.orgIndex][\"CAID\"],\n          label: this.orgs[this.peer.orgIndex][\"CAName\"] + \".\" + this.orgs[this.peer.orgIndex][\"name\"] + \".\" + this.peer.domain,\n        })\n        for (let index = 0; index < peerID.length; index++) {\n          this.nodes.updateOnly({\n            id: parseInt(peerID[index]),\n            label: this.orgs[this.peer.orgIndex][\"peerName\"][peerID[index]] + \".\" + this.orgs[this.peer.orgIndex][\"name\"] + \".\" + this.peer.domain,\n          })\n        }\n      }\n    },\n    selectShow(that, nodeID) {\n      if (that.orgs[that.nodes.get(nodeID)['group']][\"CAID\"] != nodeID) {\n        that.visible = true\n        that.showAddPeer = true\n        that.peer.parentPeer = nodeID\n        that.peer.orgIndex = that.nodes.get(nodeID)['group']\n        that.peer.domain = that.orgs[that.peer.orgIndex][\"domain\"]\n        if (that.nodes.get(nodeID)['group'] == 0) {\n          that.showAddPeer = false\n        }\n      }\n      else {\n        that.visible = false\n      }\n    },\n    download() {\n      let that = this\n      this.$axios({\n        method: 'POST',\n        url: '/download',\n        data: {\n          jsonContent: JSON.stringify(that.orgs),\n        },\n        responseType: 'blob'\n      })\n          .then(response => {\n            let link = document.createElement(\"a\")\n            link.href = window.URL.createObjectURL(new Blob([response.data]))\n            link.target = \"_blank\"\n            link.download = \"fabricDraw.zip\"\n            document.body.appendChild(link)\n            link.click()\n            document.body.removeChild(link)\n          })\n    },\n    searchNode() {\n      let that = this\n      let items = this.nodes.get({\n        filter: function (item) {\n          return item.label == that.searchNodeName;\n        }\n      })\n      if (items.length == 0) {\n        return\n      }\n      this.network.selectNodes([items[0]['id']])\n      that.selectShow(this, items[0]['id'])\n    },\n    exportNet() {\n      let data = {\n        orgs: this.orgs,\n        nodes: this.nodes.get(),\n        edges: this.edges.get(),\n      }\n      data = JSON.stringify(data)\n      let link = document.createElement(\"a\")\n      link.href = window.URL.createObjectURL(new Blob([data], { type: \"text/json\" }))\n      link.target = \"_blank\"\n      link.download = \"netjson.json\"\n      document.body.appendChild(link)\n      link.click()\n      document.body.removeChild(link)\n      console.log(this.nodes.get())\n    },\n    importNet() {\n      let that = this\n      var reader = new FileReader()\n      reader.readAsText(this.netFile)\n      reader.onload = function (evt) {\n        var fileString = evt.target.result\n        let netData = JSON.parse(fileString)\n        that.orgs = netData[\"orgs\"]\n        that.nodes.clear()\n        that.edges.clear()\n        that.nodes.add(netData[\"nodes\"])\n        that.edges.add(netData[\"edges\"])\n        console.log(netData[\"orgs\"])\n      }\n    },\n    create () {\n      let visnetwork = this.$visnetwork\n      let visdata = this.$visdata\n      this.nodes = new visdata.DataSet([\n        {\n          id: 0,\n          label: \"ca.test.com\",\n          group: 0,\n        },\n        {\n          id: 1,\n          label: \"orderer.test.com\",\n          group: 0,\n        },\n        {\n          id: 2,\n          label: \"ca.org1.test.com\",\n          group: 1,\n        },\n        {\n          id: 3,\n          label: \"peer0.org1.test.com\",\n          group: 1,\n        },\n      ])\n      this.edges = new visdata.DataSet([\n        {\n          from: 1,\n          to: 0,\n        },\n        {\n          from: 3,\n          to: 2,\n        },\n        {\n          from: 3,\n          to: 1,\n        },\n      ])\n      var container = document.querySelector('#visualization')\n      var data = {\n        nodes: this.nodes,\n        edges: this.edges\n      }\n      var options = {\n        nodes: {\n          shape: \"dot\",\n          size: 16,\n          font: {\n            size: 16,\n          },\n          borderWidth: 2,\n          shadow: true,\n        },\n        edges: {\n          width: 2,\n          shadow: true,\n        },\n      }\n      this.network = new visnetwork.Network(container, data, options)\n      const that = this\n      this.network.on(\"click\", function (params) {\n        if(params.nodes.length == 0) {\n          that.visible = false\n        }\n      })\n      this.network.on(\"selectNode\", function (params) {\n        that.selectShow(that, params.nodes[0])\n      })\n    }\n  },\n  mounted () {\n    this.create()\n  }\n}\n</script>\n\n<style scoped>\n.vis-container {\n  width: 960px;\n  height: 540px;\n}\n\n</style>\n"]}]}